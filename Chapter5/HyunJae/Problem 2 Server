// TCPServerVariable.cpp : 콘솔 응용 프로그램에 대한 진입점을 정의합니다.
//

#include "stdafx.h"

#pragma comment(lib, "ws2_32")
#include <WinSock2.h>
#include <WS2tcpip.h>
#include <stdlib.h>
#include <stdio.h>
#include <iostream>
#define SERVERPORT 9000
#define BUFSIZE 512


// 소켓 함수 오류 출력 후 종료
void err_quit(TCHAR *msg)
{
	LPVOID lpMsgBuf;
	FormatMessage(
		FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,
		NULL, WSAGetLastError(),
		MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
		(LPTSTR)&lpMsgBuf, 0, NULL);
	MessageBox(NULL, (LPCTSTR)lpMsgBuf, msg, MB_ICONERROR);
	LocalFree(lpMsgBuf);
	exit(1);
}
// 소켓 함수 오류 출력
void err_display(TCHAR *msg)
{
	LPVOID lpMsgBuf;
	FormatMessage(
		FORMAT_MESSAGE_ALLOCATE_BUFFER | FORMAT_MESSAGE_FROM_SYSTEM,
		NULL, WSAGetLastError(),
		MAKELANGID(LANG_NEUTRAL, SUBLANG_DEFAULT),
		(LPTSTR)&lpMsgBuf, 0, NULL);
	printf("[%s] %s", (char*)msg, (char *)lpMsgBuf);
	LocalFree(lpMsgBuf);
}

int _recv_ahead(SOCKET s, TCHAR* p)
{
	__declspec(thread) static int nbytes = 0;
	__declspec(thread) static char buf[1024];
	__declspec(thread) static char* ptr;

	if (nbytes == 0 || nbytes == SOCKET_ERROR)
	{
		nbytes = recv(s, buf, sizeof(buf), 0);
		if(nbytes ==SOCKET_ERROR)
		{
			return SOCKET_ERROR;
		}
		else if(nbytes ==0)
		{
			return 0;
		}
		ptr = buf;
	}

	--nbytes;
	*p = *ptr++;
	return 1;
}

int recvline(SOCKET s, TCHAR* buf, int maxlen)
{
	int n, nbytes;
	TCHAR c, *ptr = buf;

	for (n = 1; n < maxlen; n++)
	{
		nbytes = _recv_ahead(s, &c);
		if (nbytes == 1)
		{
			*ptr++ = c;
			if (c == '\n')
			{
				break;
			}
		}
		else if (nbytes == 0)
		{
			*ptr = 0;
			return n - 1;
		}
		else
		{
			return SOCKET_ERROR;
		}
	}

	*ptr = 0;
	return n;
}

int main()
{
	int retval;

	WSADATA wsa;
	if (WSAStartup(MAKEWORD(2, 2), &wsa) != 0)
		return 1;

	SOCKET listen_sock = socket(AF_INET, SOCK_STREAM, 0);
	if (listen_sock == INVALID_SOCKET)
	{
		err_quit(L"socket()");
	}

	SOCKADDR_IN serveraddr;
	ZeroMemory(&serveraddr, sizeof(serveraddr));
	serveraddr.sin_family = AF_INET;
	serveraddr.sin_addr.S_un.S_addr = htonl(INADDR_ANY);
	serveraddr.sin_port = htons(SERVERPORT);
	retval = bind(listen_sock, (SOCKADDR*)&serveraddr, sizeof(serveraddr));
	if (retval == SOCKET_ERROR)
	{
		err_quit(L"bind()");
	}

	retval = listen(listen_sock, SOMAXCONN);
	if (retval == SOCKET_ERROR)
	{
		err_quit(L"listen()");
	}

	SOCKET client_sock;
	SOCKADDR_IN clientaddr;
	int addrlen;
	TCHAR buf[BUFSIZE + 1];

	while (1)
	{
		addrlen = sizeof(clientaddr);
		client_sock = accept(listen_sock, (SOCKADDR*)&clientaddr, &addrlen);
		if (client_sock == INVALID_SOCKET)
		{
			err_display(L"accept()");
			break;
		}

		char dest[INET_ADDRSTRLEN];
		printf("\n[TCP server] client connected: IP address = %s, port = %d\n",
			inet_ntop(AF_INET,&clientaddr.sin_addr.S_un.S_addr, dest, INET_ADDRSTRLEN),
			ntohs(clientaddr.sin_port));

		char sendBuf[BUFSIZE];
		while (1)
		{
			retval = recvline(client_sock, buf, BUFSIZE + 1);
			if (retval == SOCKET_ERROR)
			{
				err_display(L"recv()");
				break;
			}
			else if (retval == 0)
			{
				break;
			}

			char dest2[INET_ADDRSTRLEN];
			printf("[TCP/%s:%d] %ls\n", inet_ntop(AF_INET, &clientaddr.sin_addr, dest2, INET_ADDRSTRLEN), ntohs(clientaddr.sin_port), buf);

			std::cin >> sendBuf;
			retval = send(client_sock, sendBuf, BUFSIZE, 0);

		}

		closesocket(client_sock);

		char dest3[INET_ADDRSTRLEN];
		printf("[TCP server] client end: IP address= %s, port number = %d\n",
			inet_ntop(AF_INET, &clientaddr.sin_addr, dest3, INET_ADDRSTRLEN), ntohs(clientaddr.sin_port));
	}


	closesocket(listen_sock);
	WSACleanup();

    return 0;
}
